// ignore: file_names
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'dart:convert';

import 'dart:math';
import 'package:animelist/Models/AnimeList.dart';
import 'package:animelist/Models/Recommendations.dart';
import 'package:animelist/searchscreen.dart';
import 'package:animelist/widgets/Trending.dart';
import 'package:http/http.dart' as http;

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
   late Future<AnimeModel> userdata;
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
     userdata = Userdata2();
  }
  final FirebaseAuth _auth = FirebaseAuth.instance;
  var SearchedAnime = "";
  // ignore: unused_field
  final PageController _controller = PageController(viewportFraction: 0.9);

  TextEditingController searchedText = TextEditingController();

  static Random _random = Random();

  var RandomNum = _random.nextInt(10);

  Future<Autogenerated> Userdata1(int pagenum) async {
    final response = await http.get(Uri.parse(
        'https://api.jikan.moe/v4/anime/${pagenum.toString()}/recommendations'));
    var userData = jsonDecode(response.body.toString());
    if (response == 200) {
      return Autogenerated.fromJson(userData);
    } else {
      return Autogenerated.fromJson(userData);
    }
  }

  Future<AnimeModel> Userdata2() async {
    final response = await http.get(
        Uri.parse('https://api.jikan.moe/v4/top/anime?filter=bypopularity'));
    var userData = jsonDecode(response.body.toString());
    if (response == 200) {
      return AnimeModel.fromJson(userData);
    } else {
      return AnimeModel.fromJson(userData);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Directionality(
      textDirection: TextDirection.ltr,
      child: Scaffold(
          body: SafeArea(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Container(
                    width: MediaQuery.of(context).size.width,
                    height: 48,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          'AnimeList',
                          style: TextStyle(
                              fontWeight: FontWeight.bold, fontSize: 28),
                        ),
                        Row(
                          children: [
                            IconButton(onPressed: () {
                              Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) {
                      return SearchScreen();
                    },
                  ),
                );
                            }, icon: Icon(Icons.search)),
                            IconButton(
                                onPressed: () {
                                  _auth.signOut();
                                },
                                icon: Icon(Icons.logout)),
                            IconButton(
                                onPressed: () {
                                  setState(() {});
                                },
                                icon: const Icon(Icons.replay_outlined)),
                          ],
                        )
                      ],
                    ),
                  ),
                ),
                // Padding(
                //   padding: const EdgeInsets.all(10.0),
                //   child: Container(
                //     height: 40,
                //     width: double.infinity,
                //     child: const Row(
                //       mainAxisAlignment: MainAxisAlignment.start,
                //       children: [
                //         Text(
                //           "Recommendations :",
                //           style: TextStyle(fontSize: 20),
                //         )
                //       ],
                //     ),
                //   ),
                // ),
                Expanded(
                  child: Container(
                    width: MediaQuery.of(context).size.width,
                    child: Column(
                      children: [
                        // SizedBox(
                        //     height: 200,
                        //     child: FutureBuilder<Autogenerated>(
                        //         future: Userdata1(RandomNum),
                        //         builder: (context, snapshot) {
                        //           var _data = snapshot.data;
                        //           if (_data == null) {
                        //             return const Center(
                        //                 child: CircularProgressIndicator());
                        //           } else {
                        //             if (snapshot.hasData) {
                        //               var data = snapshot.data?.data;
                        //               if (data == null) {
                        //                 return Container();
                        //               } else {
                        //                 return PageView.builder(
                        //                   controller: _controller,
                        //                   itemCount:
                        //                       snapshot.data!.data!.length,
                        //                   itemBuilder: (context, index) {
                        //                     return ListItem2(
                        //                         listItem: snapshot
                        //                             .data!.data![index]);
                        //                   },
                        //                 );
                        //               }
                        //             } else {
                        //               return const SafeArea(
                        //                   child: Center(
                        //                       child: Text('Loading...')));
                        //             }
                        //           }
                        //         })),
                        Expanded(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.start,
                            children: [
                              Padding(
                                padding:
                                    const EdgeInsets.only( left: 10),
                                child: Container(
                                    width: MediaQuery.of(context).size.width,
                                    child: const Text(
                                      "Trending Anime :",
                                      style: TextStyle(fontSize: 22),
                                    )),
                              ),
                              Expanded(
                                  child: FutureBuilder<AnimeModel>(
                                future: userdata,
                                builder: (context, snapshot) {
                                  if (snapshot.data == null) {
                                    return Container();
                                  }
                                  if (snapshot.hasData) {
                                    return ListView.separated(
                                      itemCount: snapshot.data!.data!.length,
                                      itemBuilder: (context, index) {
                                        if (snapshot.data!.data == null) {
                                          return Container();
                                        }
                                        return ListItem3(
                                            listItem:
                                                snapshot.data!.data![index]);
                                      },
                                      separatorBuilder:
                                          (BuildContext context, int index) {
                                        return Container();
                                      },
                                    );
                                  }
                                  return const Center(
                                      child: CircularProgressIndicator());
                                },
                              ))
                            ],
                          ),
                        )
                      ],
                    ),
                  ),
                ),
              ],
            ),
          )),
    );
  }
}
